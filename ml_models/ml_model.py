# -*- coding: utf-8 -*-
"""VCYou_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CUroxnmcVaUYeZ_0lniU4n5vFy2G4tVu
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import classification_report
import joblib
import os
from django.conf import settings

def GenerateJobLib():
    file_name = "/content/big_startup_secsees_dataset.csv"
    startup_raw = pd.read_csv(file_name)
    
    startup = startup_raw.dropna().query("funding_total_usd != '-' ")
    startup['funding_total_usd'] = startup['funding_total_usd'].astype(float)
    
    startup['founded_at'] = pd.to_datetime(startup['founded_at'], format='%Y-%m-%d', errors='coerce')
    startup['first_funding_at'] = pd.to_datetime(startup['first_funding_at'], format='%Y-%m-%d', errors='coerce')
    startup['last_funding_at'] = pd.to_datetime(startup['last_funding_at'], format='%Y-%m-%d', errors='coerce')
    
    startup = startup.dropna()
    startup['last_funding_at'] = startup['last_funding_at'].replace('21050501', '20150501')
    
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(startup['category_list'])
    
    kmeans = KMeans(n_clusters=100)
    kmeans.fit(X)
    startup['category_cluster'] = kmeans.labels_
    
    startup_prep = startup.query("status == 'ipo' or status == 'closed'")
    startup_prep['status'] = startup_prep['status'].replace({'acquired': 1, 'ipo': 1, 'closed': 0})
    
    startup_prep['funding_period_year'] = (startup_prep['last_funding_at'] - startup_prep['first_funding_at']) / pd.Timedelta(days=365.25)
    startup_prep['funding_period_year'] = startup_prep['funding_period_year'].round(1)
    
    startup_modeling = startup_prep[['status', 'funding_rounds', 'funding_period_year', 'funding_total_usd', 'category_cluster']]
    X = startup_modeling.iloc[:, 1:]
    y = startup_modeling.iloc[:, 0]
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
    
    svm = SVC(kernel='poly', degree=4)
    svm = svm.fit(X_train, y_train)
    
    svm_param = {
        'C': list(range(0, 11)),
        'kernel': ['rbf', 'poly'],
        'degree': [3, 4]
    }
    svm_model = SVC()
    svm_grid = GridSearchCV(svm_model, param_grid=svm_param, cv=5, n_jobs=-1)
    svm_grid.fit(X_train, y_train)
    
    best_model = svm_grid.best_estimator_
    joblib.dump(best_model, 'VCYou.joblib')

def ExecuteJobLib(funding_rounds, funding_period_year, funding_USD, category):
    try:
        model_path = os.path.join(settings.ML_MODELS_DIR, 'VCYou.joblib')
        model = joblib.load(model_path)

        feature_values = np.array([[
            funding_rounds,
            funding_period_year,
            funding_USD,
            category
        ]])

        feature_names = [
            'funding_rounds',
            'funding_period_year',
            'funding_total_usd',
            'category_cluster'
        ]

        features_df = pd.DataFrame(feature_values, columns=feature_names)
        return model.predict(features_df)

    except Exception as e:
        raise Exception(f"Prediction failed: {str(e)}")
